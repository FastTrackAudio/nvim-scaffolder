{
  "name": "Express API Route",
  "description": "Creates an Express API route with controller, service and tests",
  "files": [
    {
      "path": "src/routes/${name:kebab}/${name:kebab}.route.js",
      "content": "const express = require('express');\nconst { ${name:camel}Controller } = require('./controllers/${name:kebab}.controller');\n\nconst router = express.Router();\n\n/**\n * @route   GET /api/${name:kebab}\n * @desc    Get all ${name:kebab}\n * @access  Public\n */\nrouter.get('/', ${name:camel}Controller.getAll${name:pascal});\n\n/**\n * @route   GET /api/${name:kebab}/:id\n * @desc    Get ${name:kebab} by ID\n * @access  Public\n */\nrouter.get('/:id', ${name:camel}Controller.get${name:pascal}ById);\n\n/**\n * @route   POST /api/${name:kebab}\n * @desc    Create a new ${name:kebab}\n * @access  Private\n */\nrouter.post('/', ${name:camel}Controller.create${name:pascal});\n\n/**\n * @route   PUT /api/${name:kebab}/:id\n * @desc    Update ${name:kebab} by ID\n * @access  Private\n */\nrouter.put('/:id', ${name:camel}Controller.update${name:pascal});\n\n/**\n * @route   DELETE /api/${name:kebab}/:id\n * @desc    Delete ${name:kebab} by ID\n * @access  Private\n */\nrouter.delete('/:id', ${name:camel}Controller.delete${name:pascal});\n\nmodule.exports = router;\n"
    },
    {
      "path": "src/routes/${name:kebab}/controllers/${name:kebab}.controller.js",
      "content": "const { ${name:camel}Service } = require('../services/${name:kebab}.service');\n\nconst ${name:camel}Controller = {\n  /**\n   * Get all ${name:kebab}\n   */\n  getAll${name:pascal}: async (req, res) => {\n    try {\n      const ${name:camel}s = await ${name:camel}Service.getAll();\n      return res.json(${name:camel}s);\n    } catch (error) {\n      console.error(`Error in getAll${name:pascal}:`, error);\n      return res.status(500).json({ error: 'Server error' });\n    }\n  },\n\n  /**\n   * Get ${name:kebab} by ID\n   */\n  get${name:pascal}ById: async (req, res) => {\n    try {\n      const ${name:camel} = await ${name:camel}Service.getById(req.params.id);\n      if (!${name:camel}) {\n        return res.status(404).json({ error: '${name:pascal} not found' });\n      }\n      return res.json(${name:camel});\n    } catch (error) {\n      console.error(`Error in get${name:pascal}ById:`, error);\n      return res.status(500).json({ error: 'Server error' });\n    }\n  },\n\n  /**\n   * Create new ${name:kebab}\n   */\n  create${name:pascal}: async (req, res) => {\n    try {\n      const new${name:pascal} = await ${name:camel}Service.create(req.body);\n      return res.status(201).json(new${name:pascal});\n    } catch (error) {\n      console.error(`Error in create${name:pascal}:`, error);\n      return res.status(500).json({ error: 'Server error' });\n    }\n  },\n\n  /**\n   * Update ${name:kebab} by ID\n   */\n  update${name:pascal}: async (req, res) => {\n    try {\n      const updated${name:pascal} = await ${name:camel}Service.update(req.params.id, req.body);\n      if (!updated${name:pascal}) {\n        return res.status(404).json({ error: '${name:pascal} not found' });\n      }\n      return res.json(updated${name:pascal});\n    } catch (error) {\n      console.error(`Error in update${name:pascal}:`, error);\n      return res.status(500).json({ error: 'Server error' });\n    }\n  },\n\n  /**\n   * Delete ${name:kebab} by ID\n   */\n  delete${name:pascal}: async (req, res) => {\n    try {\n      const deleted = await ${name:camel}Service.delete(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: '${name:pascal} not found' });\n      }\n      return res.status(204).end();\n    } catch (error) {\n      console.error(`Error in delete${name:pascal}:`, error);\n      return res.status(500).json({ error: 'Server error' });\n    }\n  },\n};\n\nmodule.exports = { ${name:camel}Controller };\n"
    },
    {
      "path": "src/routes/${name:kebab}/services/${name:kebab}.service.js",
      "content": "// Replace this with actual database models\nlet ${name:camel}s = [];\n\nconst ${name:camel}Service = {\n  /**\n   * Get all ${name:camel}s\n   */\n  getAll: async () => {\n    return ${name:camel}s;\n  },\n\n  /**\n   * Get ${name:camel} by ID\n   */\n  getById: async (id) => {\n    return ${name:camel}s.find(${name:camel} => ${name:camel}.id === id);\n  },\n\n  /**\n   * Create new ${name:camel}\n   */\n  create: async (data) => {\n    const new${name:pascal} = {\n      id: Date.now().toString(),\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    ${name:camel}s.push(new${name:pascal});\n    return new${name:pascal};\n  },\n\n  /**\n   * Update ${name:camel} by ID\n   */\n  update: async (id, data) => {\n    const index = ${name:camel}s.findIndex(${name:camel} => ${name:camel}.id === id);\n    if (index === -1) return null;\n    \n    const updated${name:pascal} = {\n      ...${name:camel}s[index],\n      ...data,\n      updatedAt: new Date()\n    };\n    \n    ${name:camel}s[index] = updated${name:pascal};\n    return updated${name:pascal};\n  },\n\n  /**\n   * Delete ${name:camel} by ID\n   */\n  delete: async (id) => {\n    const index = ${name:camel}s.findIndex(${name:camel} => ${name:camel}.id === id);\n    if (index === -1) return false;\n    \n    ${name:camel}s.splice(index, 1);\n    return true;\n  }\n};\n\nmodule.exports = { ${name:camel}Service };\n"
    },
    {
      "path": "src/routes/${name:kebab}/tests/${name:kebab}.test.js",
      "content": "const request = require('supertest');\nconst express = require('express');\nconst ${name:camel}Routes = require('../${name:kebab}.route');\nconst { ${name:camel}Service } = require('../services/${name:kebab}.service');\n\n// Mock the ${name:camel}Service\njest.mock('../services/${name:kebab}.service');\n\nconst app = express();\napp.use(express.json());\napp.use('/api/${name:kebab}', ${name:camel}Routes);\n\ndescribe('${name:pascal} API Routes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/${name:kebab}', () => {\n    it('should return all ${name:camel}s', async () => {\n      const mock${name:pascal}s = [\n        { id: '1', name: 'Test ${name:pascal} 1' },\n        { id: '2', name: 'Test ${name:pascal} 2' }\n      ];\n      \n      ${name:camel}Service.getAll.mockResolvedValue(mock${name:pascal}s);\n      \n      const res = await request(app).get('/api/${name:kebab}');\n      \n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual(mock${name:pascal}s);\n      expect(${name:camel}Service.getAll).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('GET /api/${name:kebab}/:id', () => {\n    it('should return a single ${name:camel}', async () => {\n      const mock${name:pascal} = { id: '1', name: 'Test ${name:pascal}' };\n      \n      ${name:camel}Service.getById.mockResolvedValue(mock${name:pascal});\n      \n      const res = await request(app).get('/api/${name:kebab}/1');\n      \n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual(mock${name:pascal});\n      expect(${name:camel}Service.getById).toHaveBeenCalledWith('1');\n    });\n\n    it('should return 404 if ${name:camel} not found', async () => {\n      ${name:camel}Service.getById.mockResolvedValue(null);\n      \n      const res = await request(app).get('/api/${name:kebab}/999');\n      \n      expect(res.statusCode).toBe(404);\n    });\n  });\n\n  describe('POST /api/${name:kebab}', () => {\n    it('should create a new ${name:camel}', async () => {\n      const new${name:pascal}Data = { name: 'New ${name:pascal}' };\n      const created${name:pascal} = { id: '3', ...new${name:pascal}Data, createdAt: expect.any(Date) };\n      \n      ${name:camel}Service.create.mockResolvedValue(created${name:pascal});\n      \n      const res = await request(app)\n        .post('/api/${name:kebab}')\n        .send(new${name:pascal}Data);\n      \n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual(created${name:pascal});\n      expect(${name:camel}Service.create).toHaveBeenCalledWith(new${name:pascal}Data);\n    });\n  });\n});\n"
    }
  ]
}
{
  "name": "Module Template",
  "description": "Creates a complete module structure with service, hooks, tests and types",
  "folder_case": "kebab",
  "files": [
    {
      "path": "${folder_name}/index.ts",
      "content": [
        "export * from './${name:kebab}.service';",
        "export * from './${name:kebab}.hooks';",
        "export * from './types/${name:kebab}.type';"
      ]
    },
    {
      "path": "${folder_name}/${name:kebab}.service.ts",
      "content": [
        "/**",
        " * ${name:pascal} Service",
        " * ",
        " * Handles business logic for ${name:kebab}",
        " */",
        "",
        "export const ${name:camel}Service = {",
        "  /**",
        "   * Get a ${name:camel} by ID",
        "   */",
        "  get: async (id: string) => {",
        "    // Implementation here",
        "    return { id };",
        "  },",
        "",
        "  /**",
        "   * Create a new ${name:camel}",
        "   */",
        "  create: async (data: any) => {",
        "    // Implementation here",
        "    return { id: 'new-id', ...data };",
        "  },",
        "",
        "  /**",
        "   * Update an existing ${name:camel}",
        "   */",
        "  update: async (id: string, data: any) => {",
        "    // Implementation here",
        "    return { id, ...data };",
        "  },",
        "",
        "  /**",
        "   * Delete a ${name:camel}",
        "   */",
        "  delete: async (id: string) => {",
        "    // Implementation here",
        "    return { success: true };",
        "  }",
        "};"
      ]
    },
    {
      "path": "${folder_name}/${name:kebab}.hooks.ts",
      "content": [
        "/**",
        " * React hooks for ${name:kebab}",
        " */",
        "import { useState, useEffect } from 'react';",
        "import { ${name:camel}Service } from './${name:kebab}.service';",
        "import type { ${name:pascal} } from './types/${name:kebab}.type';",
        "",
        "/**",
        " * Hook to fetch a ${name:camel} by ID",
        " */",
        "export const use${name:pascal} = (id: string) => {",
        "  const [${name:camel}, set${name:pascal}] = useState<${name:pascal} | null>(null);",
        "  const [loading, setLoading] = useState(true);",
        "  const [error, setError] = useState<Error | null>(null);",
        "",
        "  useEffect(() => {",
        "    const fetch${name:pascal} = async () => {",
        "      try {",
        "        setLoading(true);",
        "        const data = await ${name:camel}Service.get(id);",
        "        set${name:pascal}(data);",
        "        setError(null);",
        "      } catch (err) {",
        "        setError(err instanceof Error ? err : new Error('Unknown error'));",
        "      } finally {",
        "        setLoading(false);",
        "      }",
        "    };",
        "",
        "    fetch${name:pascal}();",
        "  }, [id]);",
        "",
        "  return { ${name:camel}, loading, error };",
        "};"
      ]
    },
    {
      "path": "${folder_name}/types/${name:kebab}.type.ts",
      "content": [
        "/**",
        " * Type definitions for ${name:kebab}",
        " */",
        "",
        "/**",
        " * Main ${name:pascal} type",
        " */",
        "export type ${name:pascal} = {",
        "  id: string;",
        "  name: string;",
        "  description?: string;",
        "  createdAt: Date;",
        "  updatedAt: Date;",
        "  metadata?: Record<string, any>;",
        "};",
        "",
        "/**",
        " * ${name:pascal} creation parameters",
        " */",
        "export type ${name:pascal}CreateInput = Omit<${name:pascal}, 'id' | 'createdAt' | 'updatedAt'>;",
        "",
        "/**",
        " * ${name:pascal} update parameters",
        " */",
        "export type ${name:pascal}UpdateInput = Partial<${name:pascal}CreateInput>;"
      ]
    },
    {
      "path": "${folder_name}/README.md",
      "content": []
    }
  ]
}


{
  "name": "NestJS Module",
  "description": "Creates a complete NestJS module with controller, service, dto and tests",
  "files": [
    {
      "path": "${name}/${name:kebab}.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { ${name:pascal}Service } from './${name:kebab}.service';\nimport { ${name:pascal}Controller } from './${name:kebab}.controller';\n\n@Module({\n  controllers: [${name:pascal}Controller],\n  providers: [${name:pascal}Service],\n  exports: [${name:pascal}Service],\n})\nexport class ${name:pascal}Module {}\n"
    },
    {
      "path": "${name}/${name:kebab}.controller.ts",
      "content": "import { Controller, Get, Post, Body, Param, Put, Delete, HttpStatus, HttpCode } from '@nestjs/common';\nimport { ${name:pascal}Service } from './${name:kebab}.service';\nimport { Create${name:pascal}Dto } from './dto/create-${name:kebab}.dto';\nimport { Update${name:pascal}Dto } from './dto/update-${name:kebab}.dto';\n\n@Controller('${name:kebab}')\nexport class ${name:pascal}Controller {\n  constructor(private readonly ${name:camel}Service: ${name:pascal}Service) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  create(@Body() create${name:pascal}Dto: Create${name:pascal}Dto) {\n    return this.${name:camel}Service.create(create${name:pascal}Dto);\n  }\n\n  @Get()\n  findAll() {\n    return this.${name:camel}Service.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.${name:camel}Service.findOne(id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() update${name:pascal}Dto: Update${name:pascal}Dto) {\n    return this.${name:camel}Service.update(id, update${name:pascal}Dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string) {\n    return this.${name:camel}Service.remove(id);\n  }\n}\n"
    },
    {
      "path": "${name}/${name:kebab}.service.ts",
      "content": "import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Create${name:pascal}Dto } from './dto/create-${name:kebab}.dto';\nimport { Update${name:pascal}Dto } from './dto/update-${name:kebab}.dto';\n\nexport interface ${name:pascal} {\n  id: string;\n  name: string;\n  [key: string]: any;\n}\n\n@Injectable()\nexport class ${name:pascal}Service {\n  // In-memory store for demonstration\n  private ${name:camel}s: ${name:pascal}[] = [];\n\n  create(create${name:pascal}Dto: Create${name:pascal}Dto): ${name:pascal} {\n    const new${name:pascal} = {\n      id: Date.now().toString(),\n      ...create${name:pascal}Dto,\n    };\n    this.${name:camel}s.push(new${name:pascal});\n    return new${name:pascal};\n  }\n\n  findAll(): ${name:pascal}[] {\n    return this.${name:camel}s;\n  }\n\n  findOne(id: string): ${name:pascal} {\n    const ${name:camel} = this.${name:camel}s.find((item) => item.id === id);\n    if (!${name:camel}) {\n      throw new NotFoundException(`${name:pascal} with ID \"${id}\" not found`);\n    }\n    return ${name:camel};\n  }\n\n  update(id: string, update${name:pascal}Dto: Update${name:pascal}Dto): ${name:pascal} {\n    const index = this.${name:camel}s.findIndex((item) => item.id === id);\n    if (index === -1) {\n      throw new NotFoundException(`${name:pascal} with ID \"${id}\" not found`);\n    }\n    \n    const updated${name:pascal} = {\n      ...this.${name:camel}s[index],\n      ...update${name:pascal}Dto,\n    };\n    \n    this.${name:camel}s[index] = updated${name:pascal};\n    return updated${name:pascal};\n  }\n\n  remove(id: string): void {\n    const index = this.${name:camel}s.findIndex((item) => item.id === id);\n    if (index === -1) {\n      throw new NotFoundException(`${name:pascal} with ID \"${id}\" not found`);\n    }\n    this.${name:camel}s.splice(index, 1);\n  }\n}\n"
    },
    {
      "path": "${name}/dto/create-${name:kebab}.dto.ts",
      "content": "import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class Create${name:pascal}Dto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n}\n"
    },
    {
      "path": "${name}/dto/update-${name:kebab}.dto.ts",
      "content": "import { PartialType } from '@nestjs/mapped-types';\nimport { Create${name:pascal}Dto } from './create-${name:kebab}.dto';\n\nexport class Update${name:pascal}Dto extends PartialType(Create${name:pascal}Dto) {}\n"
    },
    {
      "path": "${name}/${name:kebab}.controller.spec.ts",
      "content": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ${name:pascal}Controller } from './${name:kebab}.controller';\nimport { ${name:pascal}Service } from './${name:kebab}.service';\n\ndescribe('${name:pascal}Controller', () => {\n  let controller: ${name:pascal}Controller;\n  let service: ${name:pascal}Service;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [${name:pascal}Controller],\n      providers: [${name:pascal}Service],\n    }).compile();\n\n    controller = module.get<${name:pascal}Controller>(${name:pascal}Controller);\n    service = module.get<${name:pascal}Service>(${name:pascal}Service);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('should return an array of ${name:camel}s', async () => {\n      const result = [{id: '1', name: 'Test ${name:pascal}'}];\n      jest.spyOn(service, 'findAll').mockImplementation(() => result);\n\n      expect(controller.findAll()).toBe(result);\n    });\n  });\n\n  describe('findOne', () => {\n    it('should return a single ${name:camel}', async () => {\n      const result = {id: '1', name: 'Test ${name:pascal}'};\n      jest.spyOn(service, 'findOne').mockImplementation(() => result);\n\n      expect(controller.findOne('1')).toBe(result);\n      expect(service.findOne).toHaveBeenCalledWith('1');\n    });\n  });\n});\n"
    },
    {
      "path": "${name}/${name:kebab}.service.spec.ts",
      "content": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ${name:pascal}Service } from './${name:kebab}.service';\nimport { NotFoundException } from '@nestjs/common';\n\ndescribe('${name:pascal}Service', () => {\n  let service: ${name:pascal}Service;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [${name:pascal}Service],\n    }).compile();\n\n    service = module.get<${name:pascal}Service>(${name:pascal}Service);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('create', () => {\n    it('should create a ${name:camel}', () => {\n      const createDto = { name: 'Test ${name:pascal}' };\n      const result = service.create(createDto);\n\n      expect(result).toHaveProperty('id');\n      expect(result.name).toEqual(createDto.name);\n      expect(service.findAll()).toHaveLength(1);\n    });\n  });\n\n  describe('findOne', () => {\n    it('should throw NotFoundException when ${name:camel} not found', () => {\n      expect(() => service.findOne('non-existent')).toThrow(NotFoundException);\n    });\n\n    it('should return the ${name:camel} if found', () => {\n      const createDto = { name: 'Test ${name:pascal}' };\n      const created = service.create(createDto);\n\n      const found = service.findOne(created.id);\n      expect(found).toEqual(created);\n    });\n  });\n});\n"
    }
  ]
}